#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int solution(vector<int> picks, vector<string> minerals) {
    int answer = 0;
    int valueSum = picks[0] + picks[1] + picks[2];
    string str = "";
    vector<pair<int, string>> scores;

    if (valueSum == 0)
        return 0;

    while (minerals.size() >= 5) {
        int add = minerals.size() % 5;
        if (add > 0)
            add = 1;
        if (valueSum >= (minerals.size() / 5) + add)
            break;
        minerals.pop_back();
    }

    int count = 0, sum = 0;
    for (int i = 0; i < minerals.size(); i++)
    {
        switch (minerals[i][0]) {
        case 'd':
            sum += 25;
            break;
        case 'i':
            sum += 5;
            break;
        case 's':
            sum += 1;
            break;
        }
        str += minerals[i][0];
        count++;
        if (count == 5) {
            scores.push_back({ sum , str });
            str = "";
            sum = 0;
            count = 0;
        }
    }

    if (count != 0) {
        scores.push_back({ sum , str });
    }
    sort(scores.begin(), scores.end(), greater<>());

    int picksNum = 0;
    while (picksNum <= 2) {
        if (picks[picksNum] == 0)
            picksNum++;
        else
            break;
    }

    for (int i = 0; i < scores.size() && picksNum <= 2; i++)
    {
        for (int j = 0; j < scores[i].second.length(); j++)
        {
            switch (scores[i].second[j]) {
            case 'd':
                if (picksNum == 0)
                    answer += 1;
                else if (picksNum == 1)
                    answer += 5;
                else
                    answer += 25;
                break;
            case 'i':
                if (picksNum == 2)
                    answer += 5;
                else
                    answer += 1;
                break;
            case 's':
                answer += 1;
                break;
            }
        }

        picks[picksNum]--;
        while (picksNum <= 2) {
            if (picks[picksNum] == 0)
                picksNum++;
            else
                break;
        }
    }

    return answer;
}
